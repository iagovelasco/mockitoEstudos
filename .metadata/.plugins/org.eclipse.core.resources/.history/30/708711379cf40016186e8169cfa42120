package br.com.caelum.leilao.servico;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Calendar;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.doThrow;
import static org.junit.Assert.*;

import org.junit.Test;
import org.mockito.InOrder;

import br.com.caelum.leilao.builder.CriadorDeLeilao;
import br.com.caelum.leilao.dominio.Leilao;
import br.com.caelum.leilao.infra.dao.LeilaoDao;
import br.com.caelum.leilao.infra.dao.RepositorioDeLeiloes;
import br.com.caelum.leilao.infra.email.EnviadorDeEmail;

public class EncerradorDeLeiLaoTest {

	@Test
	public void deveEncerrarLeiloesQueComecaramUmaSemanaAtras(){
		Calendar antiga = Calendar.getInstance();
		antiga.set(1999, 1, 20);
		
		Leilao leilao1 = new CriadorDeLeilao().para("Tv de Plasma").naData(antiga).constroi(); 
		Leilao leilao2 = new CriadorDeLeilao().para("Geladeira").naData(antiga).constroi();  
		List<Leilao> leiloesAntigos = Arrays.asList(leilao1, leilao2);
		
		RepositorioDeLeiloes daoFalso = mock(RepositorioDeLeiloes.class);
		when(daoFalso.correntes()).thenReturn(leiloesAntigos);
		
		EnviadorDeEmail enviadorDeEmail = mock(EnviadorDeEmail.class);
		
		
		EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso,enviadorDeEmail);
		encerrador.encerra();
		
		assertEquals(2,encerrador.getTotalEncerrados());
		assertTrue(leilao1.isEncerrado());
		assertTrue(leilao2.isEncerrado());
	}
	
	@Test
	public void naoDeveEncerrarleilosComecaramOntem(){
		Calendar ontem = Calendar.getInstance();
		ontem.add(Calendar.DATE, -1);
		
		Leilao leilao1 = new CriadorDeLeilao().para("Tv de Plasma").naData(ontem).constroi(); 
		Leilao leilao2 = new CriadorDeLeilao().para("Geladeira").naData(ontem).constroi();  
		List<Leilao> leiloesAntigos = Arrays.asList(leilao1, leilao2);
		
		LeilaoDao daoFalso = mock(LeilaoDao.class);
		when(daoFalso.correntes()).thenReturn(leiloesAntigos);
		
		EnviadorDeEmail enviadorDeEmail = mock(EnviadorDeEmail.class);
		
		EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso, enviadorDeEmail);
		encerrador.encerra();
		
		assertEquals(0, encerrador.getTotalEncerrados());
		assertFalse(leilao1.isEncerrado());
		assertFalse(leilao2.isEncerrado());		
	}
	
	@Test
	public void naoHajaNenhumLeilao(){  
		LeilaoDao daoFalso = mock(LeilaoDao.class);
		when(daoFalso.correntes()).thenReturn(new ArrayList<Leilao>());

		EnviadorDeEmail enviadorDeEmail = mock(EnviadorDeEmail.class);
		
		EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso, enviadorDeEmail);
		encerrador.encerra();
		
		assertEquals(0, encerrador.getTotalEncerrados());
		
	}
	
	@Test
	public void deveAtualizarLeiloesEncerrados(){
		Calendar antiga = Calendar.getInstance();
		antiga.set(1999, 1, 20);
		
		Leilao leilao1 = new CriadorDeLeilao().para("Tv de Plasma").naData(antiga).constroi(); 
	
		RepositorioDeLeiloes daoFalso = mock(RepositorioDeLeiloes.class);
		when(daoFalso.correntes()).thenReturn(Arrays.asList(leilao1));
		
		EnviadorDeEmail enviadorDeEmail = mock(EnviadorDeEmail.class);
		
		EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso, enviadorDeEmail);
		encerrador.encerra();
		
		
		InOrder inOrder = inOrder(daoFalso, enviadorDeEmail);
		inOrder.verify(daoFalso, times(1)).atualiza(leilao1);
		inOrder.verify(enviadorDeEmail, times(1)).envia(leilao1);
	}
	
	 @Test
	    public void naoDeveEncerrarLeiloesQueComecaramMenosDeUmaSemanaAtras() {

	        Calendar ontem = Calendar.getInstance();
	        ontem.add(Calendar.DAY_OF_MONTH, -1);

	        Leilao leilao1 = new CriadorDeLeilao().para("TV de plasma")
	            .naData(ontem).constroi();
	        Leilao leilao2 = new CriadorDeLeilao().para("Geladeira")
	            .naData(ontem).constroi();

	        RepositorioDeLeiloes daoFalso = mock(LeilaoDao.class);
	        when(daoFalso.correntes()).thenReturn(Arrays.asList(leilao1, leilao2));
	        
	        EnviadorDeEmail enviadorDeEmail = mock(EnviadorDeEmail.class);
			
			EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso, enviadorDeEmail);
	        encerrador.encerra();

	        assertEquals(0, encerrador.getTotalEncerrados());
	        assertFalse(leilao1.isEncerrado());
	        assertFalse(leilao2.isEncerrado());

	        InOrder inOrder = inOrder(daoFalso, enviadorDeEmail);
	        inOrder.verify(daoFalso, never()).atualiza(leilao1);
	        inOrder.verify(daoFalso, never()).atualiza(leilao2);
	        inOrder.verify(enviadorDeEmail, never()).envia(leilao1);
	        inOrder.verify(enviadorDeEmail, never()).envia(leilao2);
	    }
	 
	 
	 @Test
	 public void deveContinuarAExecucaoMesmoQuandoDaoFalhar(){
		 Calendar antiga = Calendar.getInstance();
		 antiga.set(1999, 1 , 20);
		 
		 Leilao leilao1 = new CriadorDeLeilao().para("Tv de Plasma").naData(antiga).constroi(); 
		 Leilao leilao2 = new CriadorDeLeilao().para("Geladeira").naData(antiga).constroi();  
		 
		 RepositorioDeLeiloes daoFalso = mock(RepositorioDeLeiloes.class);
		 EnviadorDeEmail carteiro = mock(EnviadorDeEmail.class);
		 
		 when(daoFalso.correntes()).thenReturn(Arrays.asList(leilao1, leilao2));
		 doThrow(new RuntimeException()).when(daoFalso).atualiza(leilao1);
		 
		 EncerradorDeLeilao encerrador = new EncerradorDeLeilao(daoFalso, carteiro);
		 encerrador.encerra();
		 
		 verify(daoFalso).atualiza(leilao2);
		 verify(carteiro).envia(leilao2);
		 
		 verify(carteiro, times(0)).envia(leilao1);
		 verify(carteiro, never()).envia(leilao1);
		 verify(carteiro, times(1)).envia(leilao2);
	 }
	
}
